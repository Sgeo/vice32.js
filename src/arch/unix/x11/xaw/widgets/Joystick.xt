####
#
#       Example widget: a Joystick direction indicator.
#       This one is based on the Athena Simple widget.
#

%% generate off
%  include_dir ".."
%  include "athena.xt"
%% generate on

widget Joystick : Simple {
    class {
    }
    instance {
        resource: Pixel(Foreground) fire_color =R(String) "red";

        resource: Pixel(Foreground) direction_color =R(String) "green";

        resource: Pixel(Foreground) off_color =R(String) "XtDefaultForeground";

        resource: Cardinal(Cardinal) enable_bits;
                  /* From lsb to msb: up down left right fire */

        private: int led_xsize;
        private: int led_ysize;
        private: GC gc;
    }

    code "top_c_file" {{{
        #include <stdio.h>
        #include <X11/Xlib.h>

        #define MARGIN          2
        #define OFF_IS_HOLLOW   0

        static
        void draw_square(JoystickWidget joy, int filled, Pixel color,
                         int x, int y, int w, int h);
    }}}

    code "JoystickInitialize" {{{
        JoystickWidget joy = (JoystickWidget)new;
        XGCValues values;

        joy->joystick.led_xsize = 4;    /* arbitrary value */
        joy->joystick.led_ysize = 4;    /* arbitrary value */

        values.foreground = joy->joystick.direction_color;
        values.background = joy->core.background_pixel;
        values.line_width = 0;
        /* Below are defaults but specify them anyway */
        values.line_style = LineSolid;
        values.join_style = JoinMiter;
        values.fill_style = FillSolid;
        values.fill_rule  = EvenOddRule;
        values.clip_mask  = None;
        values.plane_mask  = ~0;
        values.function = GXcopy;

        /*
         * Create a Graphics Context with the above attributes.
         * We're going to change the foreground colour.
         * Pretty much all the other attributes, we don't use, so
         * we don't care about them if they change behind our back.
         */
        joy->joystick.gc = XtAllocateGC(new, 0,
                        GCForeground | GCBackground | GCLineWidth |
                            GCLineStyle | GCJoinStyle | GCFillStyle |
                            GCFillRule | GCClipMask | GCPlaneMask | GCFunction,
                        &values,
                        GCForeground,
                        GCFont | GCSubwindowMode | GCGraphicsExposures |
                            GCTile | GCStipple | GCTileStipXOrigin |
                            GCTileStipYOrigin | GCClipXOrigin |
                            GCClipYOrigin | GCDashOffset | GCDashList |
                            GCArcMode);

        JoystickResize(new);
    }}}

    code "JoystickDestroy" {{{
        JoystickWidget joy = (JoystickWidget)widget;

        XtReleaseGC(widget, joy->joystick.gc);
    }}}

    code "JoystickResize" {{{
        /* Code for JoystickResize: always comply. */
        JoystickWidget joy = (JoystickWidget)widget;

        joy->joystick.led_xsize = (joy->core.width - 2 * MARGIN) / 3;
        joy->joystick.led_ysize = (joy->core.height - 2 * MARGIN) / 3;
    }}}

    code "JoystickSetValues" {{{
        JoystickWidget curjoy = (JoystickWidget)old;
        JoystickWidget newjoy = (JoystickWidget)new;
        Boolean redisplay = False;

        if (curjoy->joystick.fire_color != newjoy->joystick.fire_color ||
            curjoy->joystick.direction_color != newjoy->joystick.direction_color ||
            curjoy->joystick.off_color != newjoy->joystick.off_color) {
            /*fprintf(stderr, "JoystickWidget: colour changed\n");*/
            redisplay = True;
        }

        if (!redisplay &&
            curjoy->joystick.enable_bits != newjoy->joystick.enable_bits) {
            /*fprintf(stderr, "JoystickWidget: bits changed\n");*/
#if OFF_IS_HOLLOW
            /*
             * We could be clever here, and apply XClearArea(..., True)
             * to only the modified area, in which case we don't need to set
             * redisplay to True, which will repaint everything.
             */
            redisplay = True;
#else
            /*
             * Just force an Expose event without actually clearing
             * the background (just 1 pixel that is not painted anyway).
             * This helps to reduce flicker.
             */
            XClearArea(XtDisplay(new), XtWindow(new), 0, 0, 1, 1, True);
#endif

        }

        return redisplay;
    }}}

    code "JoystickExpose" {{{
        /* Code for JoystickExpose */
        JoystickWidget joy = (JoystickWidget)widget;

        /*
         * Call superclass Expose function;
         * not needed but shown as an example how to inherit.
         *
        joystickClassRec.core_class.superclass->core_class.expose(widget, event, region);
         */

        int bits = joy->joystick.enable_bits;
        int xsize = joy->joystick.led_xsize;
        int ysize = joy->joystick.led_ysize;

        /*
         * If this is not the last Expose event in a sequence,
         * simply ignore it. We can do this because we repaint
         * everything every time.
         */
        if (event->type == Expose) {
            XExposeEvent *ee = (XExposeEvent *)event;

            if (ee->count != 0) {
                return;
            }
        }

        /* up */
        draw_square(joy, bits & 1, joy->joystick.direction_color,
                    MARGIN + xsize, 0, xsize, ysize);

        /* down */
        draw_square(joy, bits & 2, joy->joystick.direction_color,
                    MARGIN + xsize, 2*MARGIN + 2*ysize, xsize, ysize);

        /* left */
        draw_square(joy, bits & 4, joy->joystick.direction_color,
                    0, MARGIN + ysize, xsize, ysize);

        /* right */
        draw_square(joy, bits & 8, joy->joystick.direction_color,
                    2*MARGIN + 2*xsize, MARGIN + ysize, xsize, ysize);

        /* fire, middle */
        draw_square(joy, bits & 16, joy->joystick.fire_color,
                    MARGIN + xsize, MARGIN + ysize, xsize, ysize);
    }}}

    code "bottom_c_file" {{{
        static
        void draw_square(JoystickWidget joy, int on, Pixel color,
                         int x, int y, int w, int h) {
            GC gc = joy->joystick.gc;

            /*fprintf(stderr, "draw_square: on=%d, x=%d, y=%d, w=%d, h=%d\n",
                            on, x, y, w, h);*/

#if OFF_IS_HOLLOW
            /*
             * Draw "off" indicators as hollow, coloured boxes.
             * Draw "on"  indicators as filled, coloured boxes.
             */
            XSetForeground(XtDisplay(joy), gc, color);

            if (on) {
                XFillRectangle(XtDisplay(joy), XtWindow(joy),
                               gc, x, y, w, h);
            } else {
                XDrawRectangle(XtDisplay(joy), XtWindow(joy),
                               gc, x, y, w - 1, h - 1);
            }
#else
            /*
             * Draw "off" indicators as filled, black boxes.
             * Draw "on"  indicators as filled, coloured boxes.
             */
            if (on) {
                XSetForeground(XtDisplay(joy), gc, color);
            } else {
                XSetForeground(XtDisplay(joy), gc, joy->joystick.off_color);
            }
            XFillRectangle(XtDisplay(joy), XtWindow(joy),
                           gc, x, y, w, h);
#endif
        }
    }}}
};
